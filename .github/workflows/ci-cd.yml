name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    #tags:
    #  - 'v\d+'
  #pull_request:
  #  branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository content
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Generate .env file for laravel
        run: |
          echo "${{ secrets.APP_CONFIG }}" > .env
          echo "${{ secrets.LOG_CONFIG }}" >> code/.env
          echo "${{ secrets.MAIL_CONFIG }}" >> code/.env
          echo "${{ secrets.REDIS_CONFIG }}" >> code/.env
          echo "${{ secrets.SESSION_CONFIG }}" >> code/.env
          echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> code/.env
          echo "DB_HOST=${{ secrets.MYSQL_DATABASE }}" >> code/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> code/.env
          echo "DB_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> code/.env
          echo "DB_USER=${{ secrets.MYSQL_USER }}" >> code/.env
          echo "DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> code/.env
          

      - name: Generate .env file for MySql Docker
        run: |
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" > .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env


      - name: Build project
        run: make build

      - name: start server
        run: make start

      - name: Install dependencies
        run: make app-run

      #- name: Exec Migrations
      #  run: make migrate

      #- name: Exec Migrations
      #  run: make app-test

      - name: Install Java for SonarQube
        run: sudo apt-get install -y openjdk-11-jre

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECTKEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}


  dependabot:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Dependabot metadata
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: ${{ secrets.GIT_TOKEN }}

  #postman:
  #  needs: setup
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v4
  #    - name: Run postman tests
  #      run: |
  #        npm install -g newman
  #        newman run https://api.postman.com/collections/${{ secrets.COLLECTION_ID }}?access_key=${{ secrets.POSTMAN_API_KEY }}
