name: Laravel

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.3'
    - uses: actions/checkout@v4

    - name: Copy .env
      run: |
        cd ./src
        php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Dependencies
      run: |
        cd ./src
        composer install --no-interaction --prefer-dist

    - name: Generate key
      run: |
        cd ./src
        php artisan key:generate

    - name: Directory Permissions
      run: |
        cd ./src
        chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        cd ./src
        mkdir -p database
        touch database/database.sqlite

    - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: |
        cd ./src
        php vendor/bin/phpunit  --testdox


    - name: Install Java for SonarQube
      run: sudo apt-get install -y openjdk-11-jre

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_PROJECTKEY: ${{ secrets.SONAR_PROJECT_KEY }}
        SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  deploy:
    needs: laravel-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup SSH
        run: |
          ls -lsa ./ 
          mkdir -p ~/.ssh
          echo "${{ secrets.KEY_SSH_PRIVATE }}" > ~/.ssh/id_rsa 
          echo "${{ secrets.KEY_SSH_PUBLIC }}" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa.pub
          ssh-keyscan -H -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Generate .env file for MySql Docker
        run: |
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" > .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env

      - name: Generate .env file for laravel
        run: |
          cd ./src
          echo "${{ secrets.APP_CONFIG }}" > .env
          echo "${{ secrets.LOG_CONFIG }}" >> .env
          echo "${{ secrets.MAIL_CONFIG }}" >> .env
          echo "${{ secrets.REDIS_CONFIG }}" >> .env
          echo "${{ secrets.SESSION_CONFIG }}" >> .env
          echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> .env
          echo "DB_HOST=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "DB_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env          

      - name: Copy files to remote server
        run: |
          scp -P ${{ secrets.SERVER_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r . ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}/apisec


      - name: Execute remote commands
        run: |
            ssh -p ${{ secrets.SERVER_PORT }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
                rsync -azP /home/${{ secrets.SERVER_USER }}/apisec/ /var/platform/apisec/
                cd /var/platform/apisec
                make build
                make start
                make app-run
                make migrate
                rm -rf /home/${{ secrets.SERVER_USER }}/apisec
            EOF


  zap_scan:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Run ZAP Scan
        run: |
          docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t http://localhost:29010 -g gen.conf -r zap-report.html
